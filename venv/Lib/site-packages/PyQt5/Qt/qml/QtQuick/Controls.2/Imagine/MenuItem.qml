/****************************************************************************
**
** Copyright (C) 2017 The Qt Company Ltd.
** Contact: http://www.qt.io/licensing/
**
** This file is part of the Qt Quick Controls 2 module of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:LGPL3$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see http://www.qt.io/terms-conditions. For further
** information use the contact form at http://www.qt.io/contact-us.
**
** GNU Lesser General Public License Usage
** Alternatively, this file may be used under the terms of the GNU Lesser
** General Public License version 3 as published by the Free Software
** Foundation and appearing in the file LICENSE.LGPLv3 included in the
** packaging of this file. Please review the following information to
** ensure the GNU Lesser General Public License version 3 requirements
** will be met: https://www.gnu.org/licenses/lgpl.html.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 2.0 or later as published by the Free
** Software Foundation and appearing in the file LICENSE.GPL included in
** the packaging of this file. Please review the following information to
** ensure the GNU General Public License version 2.0 requirements will be
** met: http://www.gnu.org/licenses/gpl-2.0.html.
**
** $QT_END_LICENSE$
**
****************************************************************************/

import QtQuick 2.12
import QtQuick.Templates 2.12 as T
import QtQuick.Controls 2.12
import QtQuick.Controls.impl 2.12
import QtQuick.Controls.Imagine 2.12
import QtQuick.Controls.Imagine.impl 2.12

T.MenuItem {
    id: Control

    implicitWidth: Math.max(implicitBackgroundWidth + leftInset + rightInset,
                            implicitContentWidth + leftPadding + rightPadding)
    implicitHeight: Math.max(implicitBackgroundHeight + topInset + bottomInset,
                             implicitContentHeight + topPadding + bottomPadding,
                             implicitIndicatorHeight + topPadding + bottomPadding)

    spacing: 6 // ###

    topPadding: background ? background.topPadding : 0
    leftPadding: background ? background.leftPadding : 0
    rightPadding: background ? background.rightPadding : 0
    bottomPadding: background ? background.bottomPadding : 0

    topInset: background ? -background.topInset || 0 : 0
    leftInset: background ? -background.leftInset || 0 : 0
    rightInset: background ? -background.rightInset || 0 : 0
    bottomInset: background ? -background.bottomInset || 0 : 0

    icon.width: 24
    icon.height: 24
    icon.color: Control.palette.windowText

    contentItem: IconLabel {
        readonly property real arrowPadding: Control.subMenu && Control.arrow ? Control.arrow.width + Control.spacing : 0
        readonly property real indicatorPadding: Control.checkable && Control.indicator ? Control.indicator.width + Control.spacing : 0
        leftPadding: !Control.mirrored ? indicatorPadding : arrowPadding
        rightPadding: Control.mirrored ? indicatorPadding : arrowPadding

        spacing: Control.spacing
        mirrored: Control.mirrored
        display: Control.display
        alignment: Qt.AlignLeft

        icon: Control.icon
        text: Control.text
        font: Control.font
        color: Control.palette.windowText
    }

    arrow: Image {
        x: Control.mirrored ? Control.leftPadding : Control.width - width - Control.rightPadding
        y: Control.topPadding + (Control.availableHeight - height) / 2

        visible: Control.subMenu
        source: Imagine.url + "menuitem-arrow"
        ImageSelector on source {
            states: [
                {"disabled": !Control.enabled},
                {"pressed": Control.down},
                {"checked": Control.checked},
                {"focused": Control.visualFocus},
                {"highlighted": Control.highlighted},
                {"mirrored": Control.mirrored},
                {"hovered": Control.hovered}
            ]
        }
    }

    indicator: Image {
        x: Control.text ? (Control.mirrored ? Control.width - width - Control.rightPadding : Control.leftPadding) : Control.leftPadding + (Control.availableWidth - width) / 2
        y: Control.topPadding + (Control.availableHeight - height) / 2

        visible: Control.checkable
        source: Imagine.url + "menuitem-indicator"
        ImageSelector on source {
            states: [
                {"disabled": !Control.enabled},
                {"pressed": Control.down},
                {"checked": Control.checked},
                {"focused": Control.visualFocus},
                {"highlighted": Control.highlighted},
                {"mirrored": Control.mirrored},
                {"hovered": Control.hovered}
            ]
        }
    }

    background: NinePatchImage {
        source: Imagine.url + "menuitem-background"
        NinePatchImageSelector on source {
            states: [
                {"disabled": !Control.enabled},
                {"pressed": Control.down},
                {"checked": Control.checked},
                {"focused": Control.visualFocus},
                {"highlighted": Control.highlighted},
                {"mirrored": Control.mirrored},
                {"hovered": Control.hovered}
            ]
        }
    }
}
