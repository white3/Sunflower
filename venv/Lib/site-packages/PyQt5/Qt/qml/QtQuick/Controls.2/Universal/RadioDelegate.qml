/****************************************************************************
**
** Copyright (C) 2017 The Qt Company Ltd.
** Contact: http://www.qt.io/licensing/
**
** This file is part of the Qt Quick Controls 2 module of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:LGPL3$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see http://www.qt.io/terms-conditions. For further
** information use the contact form at http://www.qt.io/contact-us.
**
** GNU Lesser General Public License Usage
** Alternatively, this file may be used under the terms of the GNU Lesser
** General Public License version 3 as published by the Free Software
** Foundation and appearing in the file LICENSE.LGPLv3 included in the
** packaging of this file. Please review the following information to
** ensure the GNU Lesser General Public License version 3 requirements
** will be met: https://www.gnu.org/licenses/lgpl.html.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 2.0 or later as published by the Free
** Software Foundation and appearing in the file LICENSE.GPL included in
** the packaging of this file. Please review the following information to
** ensure the GNU General Public License version 2.0 requirements will be
** met: http://www.gnu.org/licenses/gpl-2.0.html.
**
** $QT_END_LICENSE$
**
****************************************************************************/

import QtQuick 2.12
import QtQuick.Templates 2.12 as T
import QtQuick.Controls 2.12
import QtQuick.Controls.impl 2.12
import QtQuick.Controls.Universal 2.12
import QtQuick.Controls.Universal.impl 2.12

T.RadioDelegate {
    id: Control

    implicitWidth: Math.max(implicitBackgroundWidth + leftInset + rightInset,
                            implicitContentWidth + leftPadding + rightPadding)
    implicitHeight: Math.max(implicitBackgroundHeight + topInset + bottomInset,
                             implicitContentHeight + topPadding + bottomPadding,
                             implicitIndicatorHeight + topPadding + bottomPadding)

    spacing: 12

    padding: 12
    topPadding: padding - 1
    bottomPadding: padding + 1

    icon.width: 20
    icon.height: 20
    icon.color: Color.transparent(Universal.foreground, enabled ? 1.0 : 0.2)

    indicator: RadioIndicator {
        x: Control.text ? (Control.mirrored ? Control.leftPadding : Control.width - width - Control.rightPadding) : Control.leftPadding + (Control.availableWidth - width) / 2
        y: Control.topPadding + (Control.availableHeight - height) / 2
        Control: Control
    }

    contentItem: IconLabel {
        leftPadding: !Control.mirrored ? 0 : Control.indicator.width + Control.spacing
        rightPadding: Control.mirrored ? 0 : Control.indicator.width + Control.spacing

        spacing: Control.spacing
        mirrored: Control.mirrored
        display: Control.display
        alignment: Control.display === IconLabel.IconOnly || Control.display === IconLabel.TextUnderIcon ? Qt.AlignCenter : Qt.AlignLeft

        icon: Control.icon
        text: Control.text
        font: Control.font
        color: Color.transparent(Control.Universal.foreground, enabled ? 1.0 : 0.2)
    }

    background: Rectangle {
        visible: Control.down || Control.highlighted || Control.visualFocus || Control.hovered
        color: Control.down ? Control.Universal.listMediumColor :
               Control.hovered ? Control.Universal.listLowColor : Control.Universal.altMediumLowColor
        Rectangle {
            width: parent.width
            height: parent.height
            visible: Control.visualFocus || Control.highlighted
            color: Control.Universal.accent
            opacity: Control.Universal.theme === Universal.Light ? 0.4 : 0.6
        }

    }
}
